INPUT : 
#include <stdio.h>
#include <limits.h>

#define MAX 100

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int completion_time;
    int is_completed;
} Process;

int main() {
    Process p[MAX];
    int n, time = 0, completed = 0;
    float avg_waiting = 0, avg_turnaround = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nEnter arrival time for P%d: ", p[i].pid);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for P%d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
        p[i].is_completed = 0;
    }

    printf("\nGantt Chart:\n");

    while (completed != n) {
        int idx = -1;
        int min_burst = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && !p[i].is_completed) {
                if (p[i].burst_time < min_burst) {
                    min_burst = p[i].burst_time;
                    idx = i;
                } else if (p[i].burst_time == min_burst) {
                    // Break tie with earlier arrival
                    if (p[i].arrival_time < p[idx].arrival_time)
                        idx = i;
                }
            }
        }

        if (idx != -1) {
            p[idx].waiting_time = time - p[idx].arrival_time;
            time += p[idx].burst_time;
            p[idx].completion_time = time;
            p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
            p[idx].is_completed = 1;
            completed++;

            avg_waiting += p[idx].waiting_time;
            avg_turnaround += p[idx].turnaround_time;

            printf("| P%d ", p[idx].pid);
        } else {
            // CPU is idle
            printf("| Idle ");
            time++;
        }
    }

    printf("|\n");

    // Print final table
    printf("\nPID\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n",
               p[i].pid,
               p[i].arrival_time,
               p[i].burst_time,
               p[i].waiting_time,
               p[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", avg_waiting / n);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround / n);

    return 0;
}

OUTPUT : 
Enter number of processes: 3

Enter arrival time for P1: 1
Enter burst time for P1: 2

Enter arrival time for P2: 4
Enter burst time for P2: 5

Enter arrival time for P3: 7
Enter burst time for P3: 12

Gantt Chart:
| Idle | P1 | Idle | P2 | P3 |

PID	Arrival	Burst	Waiting	Turnaround
P1	1	2	0	2
P2	4	5	0	5
P3	7	12	2	14

Average Waiting Time: 0.67
Average Turnaround Time: 7.00


=== Code Execution Successful ===
